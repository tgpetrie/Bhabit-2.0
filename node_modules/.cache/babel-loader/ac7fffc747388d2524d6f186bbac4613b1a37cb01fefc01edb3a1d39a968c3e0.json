{"ast":null,"code":"var _jsxFileName = \"/Users/cdmxx/Downloads/Bhabit-2.0/src/components/TokenomicsChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TokenomicsChart = ({\n  data\n}) => {\n  _s();\n  const [isVisible, setIsVisible] = useState(false);\n  const radius = 80;\n  const circumference = 2 * Math.PI * radius;\n  useEffect(() => {\n    // Trigger animation when component might be in view\n    // For a real app, use Intersection Observer API for better performance\n    const timer = setTimeout(() => setIsVisible(true), 100);\n    return () => clearTimeout(timer);\n  }, []);\n  let accumulatedPercentage = 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"token-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"donut-chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        viewBox: \"0 0 200 200\",\n        className: \"chart-svg\",\n        children: data.segments.map((segment, index) => {\n          const strokeDashoffset = circumference * (1 - segment.percentage / 100);\n          const rotation = accumulatedPercentage / 100 * 360;\n          accumulatedPercentage += segment.percentage;\n          return /*#__PURE__*/_jsxDEV(\"circle\", {\n            className: \"chart-segment\",\n            cx: \"100\",\n            cy: \"100\",\n            r: radius,\n            fill: \"transparent\",\n            stroke: segment.color,\n            strokeWidth: \"32\" // Adjust for desired thickness\n            ,\n            strokeDasharray: circumference,\n            strokeDashoffset: isVisible ? strokeDashoffset : circumference,\n            transform: `rotate(${rotation} 100 100)`,\n            style: {\n              transition: `stroke-dashoffset 1.5s cubic-bezier(0.65, 0, 0.35, 1) ${index * 0.1}s, opacity 0.5s ease-in ${index * 0.1}s`,\n              opacity: isVisible ? 1 : 0\n            },\n            children: /*#__PURE__*/_jsxDEV(\"title\", {\n              children: `${segment.label}: ${segment.percentage}% (${segment.value})`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chart-total\",\n          children: data.totalValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chart-label\",\n          children: data.totalLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: data.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), data.segments.map((segment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-color\",\n          style: {\n            backgroundColor: segment.color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-text\",\n          children: [segment.label, \" (\", segment.value, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-percentage\",\n          children: [segment.percentage, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(TokenomicsChart, \"J3yJOyGdBT4L7hs1p1XQYVGMdrY=\");\n_c = TokenomicsChart;\nexport default TokenomicsChart;\nvar _c;\n$RefreshReg$(_c, \"TokenomicsChart\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","TokenomicsChart","data","_s","isVisible","setIsVisible","radius","circumference","Math","PI","timer","setTimeout","clearTimeout","accumulatedPercentage","className","children","viewBox","segments","map","segment","index","strokeDashoffset","percentage","rotation","cx","cy","r","fill","stroke","color","strokeWidth","strokeDasharray","transform","style","transition","opacity","label","value","fileName","_jsxFileName","lineNumber","columnNumber","totalValue","totalLabel","title","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/cdmxx/Downloads/Bhabit-2.0/src/components/TokenomicsChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst TokenomicsChart = ({ data }) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const radius = 80;\n  const circumference = 2 * Math.PI * radius;\n\n  useEffect(() => {\n    // Trigger animation when component might be in view\n    // For a real app, use Intersection Observer API for better performance\n    const timer = setTimeout(() => setIsVisible(true), 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  let accumulatedPercentage = 0;\n\n  return (\n    <div className=\"token-chart-container\">\n      <div className=\"donut-chart\">\n        <svg viewBox=\"0 0 200 200\" className=\"chart-svg\">\n          {data.segments.map((segment, index) => {\n            const strokeDashoffset = circumference * (1 - segment.percentage / 100);\n            const rotation = (accumulatedPercentage / 100) * 360;\n            accumulatedPercentage += segment.percentage;\n\n            return (\n              <circle\n                key={index}\n                className=\"chart-segment\"\n                cx=\"100\"\n                cy=\"100\"\n                r={radius}\n                fill=\"transparent\"\n                stroke={segment.color}\n                strokeWidth=\"32\" // Adjust for desired thickness\n                strokeDasharray={circumference}\n                strokeDashoffset={isVisible ? strokeDashoffset : circumference}\n                transform={`rotate(${rotation} 100 100)`}\n                style={{\n                  transition: `stroke-dashoffset 1.5s cubic-bezier(0.65, 0, 0.35, 1) ${index * 0.1}s, opacity 0.5s ease-in ${index * 0.1}s`,\n                  opacity: isVisible ? 1 : 0,\n                }}\n              >\n                <title>{`${segment.label}: ${segment.percentage}% (${segment.value})`}</title>\n              </circle>\n            );\n          })}\n        </svg>\n        <div className=\"chart-center\">\n          <span className=\"chart-total\">{data.totalValue}</span>\n          <span className=\"chart-label\">{data.totalLabel}</span>\n        </div>\n      </div>\n\n      <div className=\"chart-legend\">\n        <h3>{data.title}</h3>\n        {data.segments.map((segment, index) => (\n          <div className=\"legend-item\" key={index}>\n            <span className=\"legend-color\" style={{ backgroundColor: segment.color }}></span>\n            <span className=\"legend-text\">{segment.label} ({segment.value})</span>\n            <span className=\"legend-percentage\">{segment.percentage}%</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TokenomicsChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}