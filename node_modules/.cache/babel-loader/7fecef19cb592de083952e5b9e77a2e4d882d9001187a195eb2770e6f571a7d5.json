{"ast":null,"code":"import React,{useEffect,useState}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TokenomicsChart=_ref=>{let{data}=_ref;const[isVisible,setIsVisible]=useState(false);const radius=80;const circumference=2*Math.PI*radius;useEffect(()=>{// Trigger animation when component might be in view\n// For a real app, use Intersection Observer API for better performance\nconst timer=setTimeout(()=>setIsVisible(true),100);return()=>clearTimeout(timer);},[]);let accumulatedPercentage=0;return/*#__PURE__*/_jsxs(\"div\",{className:\"token-chart-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"donut-chart\",children:[/*#__PURE__*/_jsx(\"svg\",{viewBox:\"0 0 200 200\",className:\"chart-svg\",children:data.segments.map((segment,index)=>{const strokeDashoffset=circumference*(1-segment.percentage/100);const rotation=accumulatedPercentage/100*360;accumulatedPercentage+=segment.percentage;return/*#__PURE__*/_jsx(\"circle\",{className:\"chart-segment\",cx:\"100\",cy:\"100\",r:radius,fill:\"transparent\",stroke:segment.color,strokeWidth:\"32\"// Adjust for desired thickness\n,strokeDasharray:circumference,strokeDashoffset:isVisible?strokeDashoffset:circumference,transform:\"rotate(\".concat(rotation,\" 100 100)\"),style:{transition:\"stroke-dashoffset 1.5s cubic-bezier(0.65, 0, 0.35, 1) \".concat(index*0.1,\"s, opacity 0.5s ease-in \").concat(index*0.1,\"s\"),opacity:isVisible?1:0},children:/*#__PURE__*/_jsx(\"title\",{children:\"\".concat(segment.label,\": \").concat(segment.percentage,\"% (\").concat(segment.value,\")\")})},index);})}),/*#__PURE__*/_jsxs(\"div\",{className:\"chart-center\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"chart-total\",children:data.totalValue}),/*#__PURE__*/_jsx(\"span\",{className:\"chart-label\",children:data.totalLabel})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chart-legend\",children:[/*#__PURE__*/_jsx(\"h3\",{children:data.title}),data.segments.map((segment,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"legend-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"legend-color\",style:{backgroundColor:segment.color}}),/*#__PURE__*/_jsxs(\"span\",{className:\"legend-text\",children:[segment.label,\" (\",segment.value,\")\"]}),/*#__PURE__*/_jsxs(\"span\",{className:\"legend-percentage\",children:[segment.percentage,\"%\"]})]},index))]})]});};export default TokenomicsChart;","map":{"version":3,"names":["React","useEffect","useState","jsx","_jsx","jsxs","_jsxs","TokenomicsChart","_ref","data","isVisible","setIsVisible","radius","circumference","Math","PI","timer","setTimeout","clearTimeout","accumulatedPercentage","className","children","viewBox","segments","map","segment","index","strokeDashoffset","percentage","rotation","cx","cy","r","fill","stroke","color","strokeWidth","strokeDasharray","transform","concat","style","transition","opacity","label","value","totalValue","totalLabel","title","backgroundColor"],"sources":["/Users/cdmxx/Downloads/Bhabit-2.0/src/components/TokenomicsChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst TokenomicsChart = ({ data }) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const radius = 80;\n  const circumference = 2 * Math.PI * radius;\n\n  useEffect(() => {\n    // Trigger animation when component might be in view\n    // For a real app, use Intersection Observer API for better performance\n    const timer = setTimeout(() => setIsVisible(true), 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  let accumulatedPercentage = 0;\n\n  return (\n    <div className=\"token-chart-container\">\n      <div className=\"donut-chart\">\n        <svg viewBox=\"0 0 200 200\" className=\"chart-svg\">\n          {data.segments.map((segment, index) => {\n            const strokeDashoffset = circumference * (1 - segment.percentage / 100);\n            const rotation = (accumulatedPercentage / 100) * 360;\n            accumulatedPercentage += segment.percentage;\n\n            return (\n              <circle\n                key={index}\n                className=\"chart-segment\"\n                cx=\"100\"\n                cy=\"100\"\n                r={radius}\n                fill=\"transparent\"\n                stroke={segment.color}\n                strokeWidth=\"32\" // Adjust for desired thickness\n                strokeDasharray={circumference}\n                strokeDashoffset={isVisible ? strokeDashoffset : circumference}\n                transform={`rotate(${rotation} 100 100)`}\n                style={{\n                  transition: `stroke-dashoffset 1.5s cubic-bezier(0.65, 0, 0.35, 1) ${index * 0.1}s, opacity 0.5s ease-in ${index * 0.1}s`,\n                  opacity: isVisible ? 1 : 0,\n                }}\n              >\n                <title>{`${segment.label}: ${segment.percentage}% (${segment.value})`}</title>\n              </circle>\n            );\n          })}\n        </svg>\n        <div className=\"chart-center\">\n          <span className=\"chart-total\">{data.totalValue}</span>\n          <span className=\"chart-label\">{data.totalLabel}</span>\n        </div>\n      </div>\n\n      <div className=\"chart-legend\">\n        <h3>{data.title}</h3>\n        {data.segments.map((segment, index) => (\n          <div className=\"legend-item\" key={index}>\n            <span className=\"legend-color\" style={{ backgroundColor: segment.color }}></span>\n            <span className=\"legend-text\">{segment.label} ({segment.value})</span>\n            <span className=\"legend-percentage\">{segment.percentage}%</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TokenomicsChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}